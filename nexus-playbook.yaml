---
- name: Install java via apt package
  hosts: droplets
  vars_files:
    - nexus-vars.yaml
  tasks:
    - name: update apt and setting the cache valid time
      ansible.builtin.apt:
        force_apt_get: true
        cache_valid_time: 3600
        autoclean: true
        update_cache: true
    - name: Install java version "{{ java.name_package }}"
      ansible.builtin.apt:
        name:
          - "{{ java.name_package }}"
    - name: Check java package
      command: "java -version"
      register: java_stat
    - debug: "msg='java status: {{ java_stat.stderr_lines }}'"
- name: Create Nexus user and nexus group
  hosts: droplets
  vars_files:
    - nexus-vars.yaml
  tasks:
    - name: Create nexus user
      ansible.builtin.user:
        name: "{{ nexus_artifact.owner }}"
        state: present
    - name: Create nexus group
      ansible.builtin.group:
        name: "{{ nexus_artifact.group }}"
        state: present
- name: Download and unarchive
  hosts: droplets
  vars_files:
    - nexus-vars.yaml
  tasks:
    - name: Download nexus artifact
      ansible.builtin.get_url:
        url: "{{ nexus_artifact.url }}"
        dest: "{{ nexus_artifact.destination }}"
        owner: "{{ nexus_artifact.owner }}"
        group: "{{ nexus_artifact.group }}"
        mode: "0755"
      register: dowload_result
    - name: Is nexus folder existing
      ansible.builtin.stat:
        path: "{{ nexus_artifact.destination }}{{ nexus_artifact.target_folder_name }}"
      register: is_nexus_exist
    - debug: "msg={{ is_nexus_exist  }}"
    - name: Unarchive the downloaded artifact file
      ansible.builtin.unarchive:
        src: "{{ dowload_result.dest }}"
        dest: "{{ nexus_artifact.destination }}"
        remote_src: true
        owner: "{{ nexus_artifact.owner }}"
        group: "{{ nexus_artifact.owner }}"
      when: not is_nexus_exist.stat.exists
    - name: Find the nexus tar file path
      find:
        paths:
          - "{{ nexus_artifact.destination }}"
        file_type: "directory"
        patterns: "nexus-*"
      register: nexus_tar_folder 
      when: not is_nexus_exist.stat.exists   
    - debug:
        msg: |
          If it existed, the path is  {{ nexus_tar_folder.files[0].path  }}
      when: not is_nexus_exist.stat.exists
    - name: Rename the folder bin of nexus
      command: "mv {{ nexus_tar_folder.files[0].path  }} {{ nexus_artifact.destination }}{{ nexus_artifact.target_folder_name }}"
      when: not is_nexus_exist.stat.exists
- name: Replace the user start nexus
  hosts: droplets
  vars_files:
    - nexus-vars.yaml
  tasks:
    - name: Replace the name's starter
      ansible.builtin.replace:
        regexp: "run_as_user=''"
        path: "{{ nexus_artifact.destination }}{{ nexus_artifact.target_folder_name }}/bin/nexus"
        replace: "run_as_user='nexus'"
    - name: Fix bug "./nexus - 155 [[ - not found"
      ansible.builtin.replace:
        regexp: "#!/bin/sh"
        path: "{{ nexus_artifact.destination }}{{ nexus_artifact.target_folder_name }}/bin/nexus"
        replace: "#!/bin/bash"

- name: Run nexus
  hosts: droplets
  become: true
  become_user: nexus
  vars_files:
    - nexus-vars.yaml
  tasks:
    - name: Run nexus with nexus user
      command: "{{ nexus_artifact.destination }}{{ nexus_artifact.target_folder_name }}/bin/nexus start"
    - name: Wait for nexus initialize
      wait_for:
        port: 8081
        timeout: 30
    - name: Check nexus port status
      shell: |
        echo "=== Port Status ===" 
        ss -utlpn | grep 8081
        echo "================="
      register: nexus_service_status
    - debug: "msg={{ nexus_service_status.stdout_lines  }}"  

